/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.test.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.test.model.phongban;

import com.test.service.persistence.chucdanhPersistence;
import com.test.service.persistence.loaivanbanPersistence;
import com.test.service.persistence.nhanvienPersistence;
import com.test.service.persistence.nhomPersistence;
import com.test.service.persistence.phongbanPersistence;
import com.test.service.persistence.sovanbanPersistence;
import com.test.service.phongbanLocalService;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the phongban local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.test.service.impl.phongbanLocalServiceImpl}.
 * </p>
 *
 * @author Duy Nguyen
 * @see com.test.service.impl.phongbanLocalServiceImpl
 * @see com.test.service.phongbanLocalServiceUtil
 * @generated
 */
public abstract class phongbanLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements phongbanLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.test.service.phongbanLocalServiceUtil} to access the phongban local service.
	 */

	/**
	 * Adds the phongban to the database. Also notifies the appropriate model listeners.
	 *
	 * @param phongban the phongban
	 * @return the phongban that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public phongban addphongban(phongban phongban) throws SystemException {
		phongban.setNew(true);

		return phongbanPersistence.update(phongban);
	}

	/**
	 * Creates a new phongban with the primary key. Does not add the phongban to the database.
	 *
	 * @param id the primary key for the new phongban
	 * @return the new phongban
	 */
	@Override
	public phongban createphongban(long id) {
		return phongbanPersistence.create(id);
	}

	/**
	 * Deletes the phongban with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the phongban
	 * @return the phongban that was removed
	 * @throws PortalException if a phongban with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public phongban deletephongban(long id)
		throws PortalException, SystemException {
		return phongbanPersistence.remove(id);
	}

	/**
	 * Deletes the phongban from the database. Also notifies the appropriate model listeners.
	 *
	 * @param phongban the phongban
	 * @return the phongban that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public phongban deletephongban(phongban phongban) throws SystemException {
		return phongbanPersistence.remove(phongban);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(phongban.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return phongbanPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.test.model.impl.phongbanModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return phongbanPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.test.model.impl.phongbanModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return phongbanPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return phongbanPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return phongbanPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public phongban fetchphongban(long id) throws SystemException {
		return phongbanPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the phongban with the primary key.
	 *
	 * @param id the primary key of the phongban
	 * @return the phongban
	 * @throws PortalException if a phongban with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public phongban getphongban(long id)
		throws PortalException, SystemException {
		return phongbanPersistence.findByPrimaryKey(id);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return phongbanPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the phongbans.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.test.model.impl.phongbanModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of phongbans
	 * @param end the upper bound of the range of phongbans (not inclusive)
	 * @return the range of phongbans
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<phongban> getphongbans(int start, int end)
		throws SystemException {
		return phongbanPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of phongbans.
	 *
	 * @return the number of phongbans
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getphongbansCount() throws SystemException {
		return phongbanPersistence.countAll();
	}

	/**
	 * Updates the phongban in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param phongban the phongban
	 * @return the phongban that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public phongban updatephongban(phongban phongban) throws SystemException {
		return phongbanPersistence.update(phongban);
	}

	/**
	 * Returns the chucdanh local service.
	 *
	 * @return the chucdanh local service
	 */
	public com.test.service.chucdanhLocalService getchucdanhLocalService() {
		return chucdanhLocalService;
	}

	/**
	 * Sets the chucdanh local service.
	 *
	 * @param chucdanhLocalService the chucdanh local service
	 */
	public void setchucdanhLocalService(
		com.test.service.chucdanhLocalService chucdanhLocalService) {
		this.chucdanhLocalService = chucdanhLocalService;
	}

	/**
	 * Returns the chucdanh remote service.
	 *
	 * @return the chucdanh remote service
	 */
	public com.test.service.chucdanhService getchucdanhService() {
		return chucdanhService;
	}

	/**
	 * Sets the chucdanh remote service.
	 *
	 * @param chucdanhService the chucdanh remote service
	 */
	public void setchucdanhService(
		com.test.service.chucdanhService chucdanhService) {
		this.chucdanhService = chucdanhService;
	}

	/**
	 * Returns the chucdanh persistence.
	 *
	 * @return the chucdanh persistence
	 */
	public chucdanhPersistence getchucdanhPersistence() {
		return chucdanhPersistence;
	}

	/**
	 * Sets the chucdanh persistence.
	 *
	 * @param chucdanhPersistence the chucdanh persistence
	 */
	public void setchucdanhPersistence(chucdanhPersistence chucdanhPersistence) {
		this.chucdanhPersistence = chucdanhPersistence;
	}

	/**
	 * Returns the loaivanban local service.
	 *
	 * @return the loaivanban local service
	 */
	public com.test.service.loaivanbanLocalService getloaivanbanLocalService() {
		return loaivanbanLocalService;
	}

	/**
	 * Sets the loaivanban local service.
	 *
	 * @param loaivanbanLocalService the loaivanban local service
	 */
	public void setloaivanbanLocalService(
		com.test.service.loaivanbanLocalService loaivanbanLocalService) {
		this.loaivanbanLocalService = loaivanbanLocalService;
	}

	/**
	 * Returns the loaivanban remote service.
	 *
	 * @return the loaivanban remote service
	 */
	public com.test.service.loaivanbanService getloaivanbanService() {
		return loaivanbanService;
	}

	/**
	 * Sets the loaivanban remote service.
	 *
	 * @param loaivanbanService the loaivanban remote service
	 */
	public void setloaivanbanService(
		com.test.service.loaivanbanService loaivanbanService) {
		this.loaivanbanService = loaivanbanService;
	}

	/**
	 * Returns the loaivanban persistence.
	 *
	 * @return the loaivanban persistence
	 */
	public loaivanbanPersistence getloaivanbanPersistence() {
		return loaivanbanPersistence;
	}

	/**
	 * Sets the loaivanban persistence.
	 *
	 * @param loaivanbanPersistence the loaivanban persistence
	 */
	public void setloaivanbanPersistence(
		loaivanbanPersistence loaivanbanPersistence) {
		this.loaivanbanPersistence = loaivanbanPersistence;
	}

	/**
	 * Returns the nhanvien local service.
	 *
	 * @return the nhanvien local service
	 */
	public com.test.service.nhanvienLocalService getnhanvienLocalService() {
		return nhanvienLocalService;
	}

	/**
	 * Sets the nhanvien local service.
	 *
	 * @param nhanvienLocalService the nhanvien local service
	 */
	public void setnhanvienLocalService(
		com.test.service.nhanvienLocalService nhanvienLocalService) {
		this.nhanvienLocalService = nhanvienLocalService;
	}

	/**
	 * Returns the nhanvien remote service.
	 *
	 * @return the nhanvien remote service
	 */
	public com.test.service.nhanvienService getnhanvienService() {
		return nhanvienService;
	}

	/**
	 * Sets the nhanvien remote service.
	 *
	 * @param nhanvienService the nhanvien remote service
	 */
	public void setnhanvienService(
		com.test.service.nhanvienService nhanvienService) {
		this.nhanvienService = nhanvienService;
	}

	/**
	 * Returns the nhanvien persistence.
	 *
	 * @return the nhanvien persistence
	 */
	public nhanvienPersistence getnhanvienPersistence() {
		return nhanvienPersistence;
	}

	/**
	 * Sets the nhanvien persistence.
	 *
	 * @param nhanvienPersistence the nhanvien persistence
	 */
	public void setnhanvienPersistence(nhanvienPersistence nhanvienPersistence) {
		this.nhanvienPersistence = nhanvienPersistence;
	}

	/**
	 * Returns the nhom local service.
	 *
	 * @return the nhom local service
	 */
	public com.test.service.nhomLocalService getnhomLocalService() {
		return nhomLocalService;
	}

	/**
	 * Sets the nhom local service.
	 *
	 * @param nhomLocalService the nhom local service
	 */
	public void setnhomLocalService(
		com.test.service.nhomLocalService nhomLocalService) {
		this.nhomLocalService = nhomLocalService;
	}

	/**
	 * Returns the nhom remote service.
	 *
	 * @return the nhom remote service
	 */
	public com.test.service.nhomService getnhomService() {
		return nhomService;
	}

	/**
	 * Sets the nhom remote service.
	 *
	 * @param nhomService the nhom remote service
	 */
	public void setnhomService(com.test.service.nhomService nhomService) {
		this.nhomService = nhomService;
	}

	/**
	 * Returns the nhom persistence.
	 *
	 * @return the nhom persistence
	 */
	public nhomPersistence getnhomPersistence() {
		return nhomPersistence;
	}

	/**
	 * Sets the nhom persistence.
	 *
	 * @param nhomPersistence the nhom persistence
	 */
	public void setnhomPersistence(nhomPersistence nhomPersistence) {
		this.nhomPersistence = nhomPersistence;
	}

	/**
	 * Returns the phongban local service.
	 *
	 * @return the phongban local service
	 */
	public com.test.service.phongbanLocalService getphongbanLocalService() {
		return phongbanLocalService;
	}

	/**
	 * Sets the phongban local service.
	 *
	 * @param phongbanLocalService the phongban local service
	 */
	public void setphongbanLocalService(
		com.test.service.phongbanLocalService phongbanLocalService) {
		this.phongbanLocalService = phongbanLocalService;
	}

	/**
	 * Returns the phongban remote service.
	 *
	 * @return the phongban remote service
	 */
	public com.test.service.phongbanService getphongbanService() {
		return phongbanService;
	}

	/**
	 * Sets the phongban remote service.
	 *
	 * @param phongbanService the phongban remote service
	 */
	public void setphongbanService(
		com.test.service.phongbanService phongbanService) {
		this.phongbanService = phongbanService;
	}

	/**
	 * Returns the phongban persistence.
	 *
	 * @return the phongban persistence
	 */
	public phongbanPersistence getphongbanPersistence() {
		return phongbanPersistence;
	}

	/**
	 * Sets the phongban persistence.
	 *
	 * @param phongbanPersistence the phongban persistence
	 */
	public void setphongbanPersistence(phongbanPersistence phongbanPersistence) {
		this.phongbanPersistence = phongbanPersistence;
	}

	/**
	 * Returns the sovanban local service.
	 *
	 * @return the sovanban local service
	 */
	public com.test.service.sovanbanLocalService getsovanbanLocalService() {
		return sovanbanLocalService;
	}

	/**
	 * Sets the sovanban local service.
	 *
	 * @param sovanbanLocalService the sovanban local service
	 */
	public void setsovanbanLocalService(
		com.test.service.sovanbanLocalService sovanbanLocalService) {
		this.sovanbanLocalService = sovanbanLocalService;
	}

	/**
	 * Returns the sovanban remote service.
	 *
	 * @return the sovanban remote service
	 */
	public com.test.service.sovanbanService getsovanbanService() {
		return sovanbanService;
	}

	/**
	 * Sets the sovanban remote service.
	 *
	 * @param sovanbanService the sovanban remote service
	 */
	public void setsovanbanService(
		com.test.service.sovanbanService sovanbanService) {
		this.sovanbanService = sovanbanService;
	}

	/**
	 * Returns the sovanban persistence.
	 *
	 * @return the sovanban persistence
	 */
	public sovanbanPersistence getsovanbanPersistence() {
		return sovanbanPersistence;
	}

	/**
	 * Sets the sovanban persistence.
	 *
	 * @param sovanbanPersistence the sovanban persistence
	 */
	public void setsovanbanPersistence(sovanbanPersistence sovanbanPersistence) {
		this.sovanbanPersistence = sovanbanPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.test.model.phongban",
			phongbanLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.test.model.phongban");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return phongban.class;
	}

	protected String getModelClassName() {
		return phongban.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = phongbanPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.test.service.chucdanhLocalService.class)
	protected com.test.service.chucdanhLocalService chucdanhLocalService;
	@BeanReference(type = com.test.service.chucdanhService.class)
	protected com.test.service.chucdanhService chucdanhService;
	@BeanReference(type = chucdanhPersistence.class)
	protected chucdanhPersistence chucdanhPersistence;
	@BeanReference(type = com.test.service.loaivanbanLocalService.class)
	protected com.test.service.loaivanbanLocalService loaivanbanLocalService;
	@BeanReference(type = com.test.service.loaivanbanService.class)
	protected com.test.service.loaivanbanService loaivanbanService;
	@BeanReference(type = loaivanbanPersistence.class)
	protected loaivanbanPersistence loaivanbanPersistence;
	@BeanReference(type = com.test.service.nhanvienLocalService.class)
	protected com.test.service.nhanvienLocalService nhanvienLocalService;
	@BeanReference(type = com.test.service.nhanvienService.class)
	protected com.test.service.nhanvienService nhanvienService;
	@BeanReference(type = nhanvienPersistence.class)
	protected nhanvienPersistence nhanvienPersistence;
	@BeanReference(type = com.test.service.nhomLocalService.class)
	protected com.test.service.nhomLocalService nhomLocalService;
	@BeanReference(type = com.test.service.nhomService.class)
	protected com.test.service.nhomService nhomService;
	@BeanReference(type = nhomPersistence.class)
	protected nhomPersistence nhomPersistence;
	@BeanReference(type = com.test.service.phongbanLocalService.class)
	protected com.test.service.phongbanLocalService phongbanLocalService;
	@BeanReference(type = com.test.service.phongbanService.class)
	protected com.test.service.phongbanService phongbanService;
	@BeanReference(type = phongbanPersistence.class)
	protected phongbanPersistence phongbanPersistence;
	@BeanReference(type = com.test.service.sovanbanLocalService.class)
	protected com.test.service.sovanbanLocalService sovanbanLocalService;
	@BeanReference(type = com.test.service.sovanbanService.class)
	protected com.test.service.sovanbanService sovanbanService;
	@BeanReference(type = sovanbanPersistence.class)
	protected sovanbanPersistence sovanbanPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private phongbanLocalServiceClpInvoker _clpInvoker = new phongbanLocalServiceClpInvoker();
}